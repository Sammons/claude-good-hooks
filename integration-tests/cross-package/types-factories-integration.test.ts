import { describe, it, expect } from 'vitest';
import { isClaudeSettings, isHookConfiguration, isHookCommand } from '@claude-good-hooks/types';
// Note: Factory imports would be added here when the packages are properly built

/**
 * Integration tests between types and factories packages
 */

describe('Types-Factories Integration', () => {
  it('should validate factory-generated hook configurations', () => {
    // Simulate configurations that might be generated by factory functions
    const factoryGeneratedHookConfig = {
      matcher: 'Write|Edit|MultiEdit',
      hooks: [
        {
          type: 'command' as const,
          command: 'eslint --fix .',
          timeout: 30000,
        },
        {
          type: 'command' as const,
          command: 'prettier --write .',
          timeout: 15000,
        },
      ],
    };

    expect(isHookConfiguration(factoryGeneratedHookConfig)).toBe(true);
    
    // Validate individual commands
    factoryGeneratedHookConfig.hooks.forEach(hook => {
      expect(isHookCommand(hook)).toBe(true);
    });
  });

  it('should validate factory-generated settings objects', () => {
    // Simulate complete settings that might be generated by convenience factories
    const factoryGeneratedSettings = {
      hooks: {
        PostToolUse: [
          {
            matcher: 'Write|Edit',
            hooks: [
              { type: 'command' as const, command: 'npm run lint:fix' },
              { type: 'command' as const, command: 'npm run format' },
            ],
          },
        ],
        PreToolUse: [
          {
            matcher: 'Bash',
            hooks: [
              { type: 'command' as const, command: 'validate-command.sh', timeout: 5000 },
            ],
          },
        ],
      },
    };

    expect(isClaudeSettings(factoryGeneratedSettings)).toBe(true);
  });

  it('should work with chained factory operations', () => {
    // Simulate a complex settings object built through multiple factory calls
    const chainedSettings = {
      hooks: {
        SessionStart: [
          {
            hooks: [
              { type: 'command' as const, command: 'git fetch --all' },
              { type: 'command' as const, command: 'npm ci', timeout: 120000 },
            ],
          },
        ],
        PreToolUse: [
          {
            matcher: 'Write|Edit|MultiEdit',
            hooks: [{ type: 'command' as const, command: 'create-backup.sh' }],
          },
        ],
        PostToolUse: [
          {
            matcher: 'Write|Edit|MultiEdit',
            hooks: [
              { type: 'command' as const, command: 'format-file.sh' },
              { type: 'command' as const, command: 'run-tests.sh', timeout: 60000 },
            ],
          },
        ],
        SessionEnd: [
          {
            hooks: [
              { type: 'command' as const, command: 'cleanup-temp-files.sh' },
              { type: 'command' as const, command: 'git status --porcelain' },
            ],
          },
        ],
      },
    };

    expect(isClaudeSettings(chainedSettings)).toBe(true);
  });

  it('should handle utility factory scenarios', () => {
    // Test scenarios that utility factories might generate
    const utilityScenarios = [
      // Development environment setup
      {
        hooks: {
          SessionStart: [
            {
              hooks: [
                { type: 'command' as const, command: 'docker-compose up -d' },
                { type: 'command' as const, command: 'npm run dev:setup' },
              ],
            },
          ],
        },
      },
      // Testing pipeline
      {
        hooks: {
          PostToolUse: [
            {
              matcher: 'Write|Edit',
              hooks: [
                { type: 'command' as const, command: 'npm run test:unit' },
                { type: 'command' as const, command: 'npm run test:integration', timeout: 180000 },
              ],
            },
          ],
        },
      },
      // Security scanning
      {
        hooks: {
          PreToolUse: [
            {
              matcher: 'Write',
              hooks: [
                { type: 'command' as const, command: 'scan-for-secrets.sh' },
                { type: 'command' as const, command: 'check-file-permissions.sh' },
              ],
            },
          ],
        },
      },
    ];

    utilityScenarios.forEach(scenario => {
      expect(isClaudeSettings(scenario)).toBe(true);
    });
  });
});