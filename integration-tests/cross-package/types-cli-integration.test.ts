import { describe, it, expect } from 'vitest';
import { isClaudeSettings, isHookPlugin } from '@claude-good-hooks/types';
// Note: CLI imports would be added here when the packages are properly built

/**
 * Integration tests between types and CLI packages
 */

describe('Types-CLI Integration', () => {
  it('should validate CLI-generated settings with types package', () => {
    // Simulate settings that might be generated by CLI
    const cliGeneratedSettings = {
      hooks: {
        PostToolUse: [
          {
            matcher: 'Write|Edit',
            hooks: [
              {
                type: 'command' as const,
                command: 'prettier --write .',
                timeout: 30000,
              },
            ],
          },
        ],
      },
    };

    expect(isClaudeSettings(cliGeneratedSettings)).toBe(true);
  });

  it('should validate plugin definitions created by CLI with types package', () => {
    // Simulate a plugin that might be created through CLI operations
    const cliCreatedPlugin = {
      name: 'formatter-plugin',
      description: 'Auto-format code on file changes',
      version: '1.0.0',
      customArgs: {
        languages: {
          description: 'Languages to format',
          type: 'string' as const,
          default: 'typescript,javascript',
        },
      },
      makeHook: (args: Record<string, any>) => ({
        PostToolUse: [
          {
            matcher: 'Write|Edit',
            hooks: [
              {
                type: 'command' as const,
                command: `prettier --parser ${args.languages || 'typescript'} --write .`,
              },
            ],
          },
        ],
      }),
    };

    expect(isHookPlugin(cliCreatedPlugin)).toBe(true);
    
    // Test that the plugin can generate valid settings
    const generatedSettings = { hooks: cliCreatedPlugin.makeHook({ languages: 'typescript' }) };
    expect(isClaudeSettings(generatedSettings)).toBe(true);
  });

  it('should handle type conversion between packages', () => {
    // Test that complex nested structures pass validation
    const complexSettings = {
      hooks: {
        PreToolUse: [
          {
            matcher: 'mcp__.*__write.*',
            hooks: [
              { type: 'command' as const, command: 'backup-before-write.sh' },
            ],
          },
        ],
        PostToolUse: [
          {
            matcher: '*',
            hooks: [
              { type: 'command' as const, command: 'audit-all-operations.sh', timeout: 5000 },
            ],
          },
        ],
        SessionStart: [
          {
            hooks: [
              { type: 'command' as const, command: 'load-context.sh' },
            ],
          },
        ],
      },
    };

    expect(isClaudeSettings(complexSettings)).toBe(true);
  });
});