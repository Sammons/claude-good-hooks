{
  "version": "1.0.0",
  "metadata": {
    "exported": "2025-09-01T20:34:44.599Z",
    "source": [
      "project"
    ],
    "generator": "claude-good-hooks-cli",
    "description": "Exported hooks configuration from project settings"
  },
  "settings": {
    "$schema": "https://github.com/sammons/claude-good-hooks/schemas/claude-settings.json",
    "version": "1.0.0",
    "hooks": {
      "PreToolUse": [
        {
          "matcher": "Write|Edit",
          "enabled": true,
          "hooks": [
            {
              "type": "command",
              "command": "#!/bin/bash\n# Protect sensitive files from modification\nif echo \"$1\" | grep -E '\\.(env|key|pem|p12|keystore)$' > /dev/null; then\n  echo \"Blocked modification of sensitive file: $1\" >&2\n  exit 2\nfi",
              "timeout": 5,
              "enabled": true,
              "continueOnError": false
            }
          ]
        }
      ],
      "PostToolUse": [
        {
          "matcher": "Write|Edit|MultiEdit",
          "enabled": true,
          "hooks": [
            {
              "type": "command",
              "command": "#!/bin/bash\n# Validate that modified files don't break git status\nif [ -d .git ] && ! git status --porcelain > /dev/null 2>&1; then\n  echo \"Git repository appears to be corrupted after file modification\" >&2\n  exit 2\nfi",
              "timeout": 10,
              "enabled": true,
              "continueOnError": false
            }
          ]
        },
        {
          "matcher": "Write|Edit",
          "enabled": true,
          "hooks": [
            {
              "type": "command",
              "command": "#!/bin/bash\n# Node.js syntax check\nfile_path=\"$1\"\nif [[ \"$file_path\" == *.js ]] || [[ \"$file_path\" == *.mjs ]]; then\n  if command -v node > /dev/null; then\n    node -c \"$file_path\" 2>/dev/null || {\n      echo \"JavaScript syntax errors in $file_path\" >&2\n      exit 2\n    }\n  fi\nfi",
              "timeout": 10,
              "enabled": true,
              "continueOnError": false
            }
          ]
        },
        {
          "matcher": "Write|Edit",
          "enabled": true,
          "hooks": [
            {
              "type": "command",
              "command": "#!/bin/bash\n# TypeScript syntax check\nfile_path=\"$1\"\nif [[ \"$file_path\" == *.ts ]] && command -v tsc > /dev/null; then\n  tsc --noEmit --skipLibCheck \"$file_path\" 2>/dev/null || {\n    echo \"TypeScript syntax errors in $file_path\" >&2\n    exit 2\n  }\nfi",
              "timeout": 20,
              "enabled": true,
              "continueOnError": false
            }
          ]
        },
        {
          "matcher": "Write|Edit",
          "enabled": true,
          "hooks": [
            {
              "type": "command",
              "command": "#!/bin/bash\n# Run tests for modified files\nfile_path=\"$1\"\nif [[ \"$file_path\" == *test* ]] || [[ \"$file_path\" == *spec* ]]; then\n  if command -v npm > /dev/null; then\n    npm run test -- --testPathPattern=\"$file_path\" --passWithNoTests 2>/dev/null || {\n      echo \"Tests failed for $file_path\" >&2\n      exit 2\n    }\n  fi\nfi",
              "timeout": 60,
              "enabled": true,
              "continueOnError": false
            }
          ]
        }
      ]
    },
    "meta": {
      "createdAt": "2025-09-01T20:34:44.596Z",
      "updatedAt": "2025-09-01T20:34:44.598Z",
      "source": "project",
      "migrations": [
        {
          "version": "1.0.0",
          "appliedAt": "2025-09-01T20:34:44.596Z",
          "description": "Converted from legacy settings format",
          "changes": [
            "Added versioning and metadata",
            "Applied schema validation"
          ]
        },
        {
          "version": "1.0.0",
          "appliedAt": "2025-09-01T20:34:44.597Z",
          "description": "Convert legacy unversioned settings to versioned format with metadata",
          "changes": [
            "Migrated to version 1.0.0"
          ]
        }
      ]
    }
  }
}