# ===================================================================
# Canary Release Workflow - Automated Testing & Pre-release
# ===================================================================
#
# This workflow handles canary releases for testing new features 
# before they reach production. Canary releases are automatically
# triggered and include comprehensive testing and rollback mechanisms.
#
# Triggers:
# - Push to 'canary' branch
# - Manual workflow dispatch
# - Pull requests targeting main (for testing)
#
# Process:
# 1. Run comprehensive test suite
# 2. Build all packages
# 3. Generate canary version (e.g., 1.2.3-canary.20241201.abc123)
# 4. Publish to npm with 'canary' tag
# 5. Deploy test environment
# 6. Run smoke tests against canary version
# 7. Create canary release notes
# 8. Notify team of canary availability
#
# Rollback Mechanisms:
# - Automatic rollback on test failures
# - Manual rollback via workflow dispatch
# - Canary cleanup after successful main release
#
# ===================================================================

name: Canary Release

on:
  # Trigger on canary branch pushes
  push:
    branches:
      - canary
      - 'canary/**'
  
  # Trigger on PRs to main for testing
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - labeled
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Custom version suffix (e.g., "alpha", "beta")'
        required: false
        default: 'canary'
      skip_tests:
        description: 'Skip test suite (for debugging)'
        type: boolean
        required: false
        default: false
      publish_canary:
        description: 'Publish canary packages to npm'
        type: boolean
        required: false
        default: true

# Prevent concurrent canary releases
concurrency:
  group: canary-${{ github.ref }}
  cancel-in-progress: true

env:
  CANARY_REGISTRY: 'https://registry.npmjs.org'
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.12.4'

jobs:
  # ===================================================================
  # Pre-flight Checks
  # ===================================================================
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.conditions.outputs.should-publish }}
      canary-version: ${{ steps.version.outputs.canary-version }}
      is-pr: ${{ steps.conditions.outputs.is-pr }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check trigger conditions
        id: conditions
        run: |
          # Determine if we should publish canary
          SHOULD_PUBLISH="false"
          IS_PR="false"
          
          if [[ "${{ github.event_name }}" == "push" ]]; then
            SHOULD_PUBLISH="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_PUBLISH="${{ inputs.publish_canary }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IS_PR="true"
            # Only publish if PR has 'canary' label
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'canary') }}" == "true" ]]; then
              SHOULD_PUBLISH="true"
            fi
          fi
          
          echo "should-publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "is-pr=$IS_PR" >> $GITHUB_OUTPUT
          echo "Should publish canary: $SHOULD_PUBLISH"
          echo "Is PR: $IS_PR"
          
      - name: Generate canary version
        id: version
        run: |
          # Get base version from package.json
          BASE_VERSION=$(node -p "require('./package.json').version")
          
          # Generate timestamp and short hash
          TIMESTAMP=$(date -u +"%Y%m%d%H%M%S")
          SHORT_SHA=${GITHUB_SHA:0:7}
          
          # Use custom suffix or default to 'canary'
          SUFFIX="${{ inputs.version_suffix || 'canary' }}"
          
          # Generate canary version
          if [[ "${{ steps.conditions.outputs.is-pr }}" == "true" ]]; then
            CANARY_VERSION="${BASE_VERSION}-pr${{ github.event.pull_request.number }}.${SHORT_SHA}"
          else
            CANARY_VERSION="${BASE_VERSION}-${SUFFIX}.${TIMESTAMP}.${SHORT_SHA}"
          fi
          
          echo "canary-version=$CANARY_VERSION" >> $GITHUB_OUTPUT
          echo "Generated canary version: $CANARY_VERSION"

  # ===================================================================
  # Test Suite
  # ===================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: preflight
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Validate dependencies
        run: pnpm run validate:deps
        
      - name: Lint code
        run: pnpm run lint
        
      - name: Check formatting
        run: pnpm run check-format
        
      - name: Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: pnpm run test:coverage
        
      - name: Upload test coverage
        if: ${{ !inputs.skip_tests }}
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: canary
          name: canary-coverage
          
      - name: Build packages
        run: pnpm run build
        
      - name: Run smoke tests
        run: pnpm run test:smoke

  # ===================================================================
  # Canary Build & Publish
  # ===================================================================
  publish:
    name: Build & Publish Canary
    runs-on: ubuntu-latest
    needs: [preflight, test]
    if: needs.preflight.outputs.should-publish == 'true'
    
    permissions:
      contents: read
      id-token: write # For npm provenance
      
    outputs:
      published-packages: ${{ steps.publish.outputs.published-packages }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.CANARY_REGISTRY }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build packages
        run: pnpm run build
        
      - name: Update package versions
        run: |
          CANARY_VERSION="${{ needs.preflight.outputs.canary-version }}"
          echo "🏷️  Updating all packages to canary version $CANARY_VERSION"
          
          # Update package.json versions
          for pkg_dir in packages/*/; do
            if [ -f "$pkg_dir/package.json" ]; then
              pkg_name=$(basename "$pkg_dir")
              echo "  📦 Updating $pkg_name to version $CANARY_VERSION"
              
              # Update version and add canary tag info
              jq --arg version "$CANARY_VERSION" \
                 --arg tag "canary" \
                 '.version = $version | .publishConfig.tag = $tag' \
                 "$pkg_dir/package.json" > "$pkg_dir/package.json.tmp"
              mv "$pkg_dir/package.json.tmp" "$pkg_dir/package.json"
            fi
          done
          
          echo "✅ Version update completed"
          
      - name: Publish canary packages
        id: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # List of packages that should be published
          PUBLISHABLE_PACKAGES=(
            "claude-good-hooks-cli"
            "claude-good-hooks-types"
            "dirty-hook"
            "claude-good-hooks-template-hook"
          )
          
          echo "🚀 Publishing canary packages to npm..."
          
          PUBLISHED=()
          
          for pkg_name in "${PUBLISHABLE_PACKAGES[@]}"; do
            pkg_dir="packages/$pkg_name"
            
            if [ -d "$pkg_dir" ] && [ -f "$pkg_dir/package.json" ]; then
              echo "📦 Publishing canary $pkg_name..."
              cd "$pkg_dir"
              
              # Skip if marked as private
              if [ "$(cat package.json | jq -r '.private // false')" = "true" ]; then
                echo "⚠️  Skipping $pkg_name (marked as private)"
                cd - > /dev/null
                continue
              fi
              
              # Publish with canary tag and provenance
              if npm publish --tag canary --provenance --access public; then
                echo "✅ Successfully published canary $pkg_name"
                PUBLISHED+=("$pkg_name")
              else
                echo "❌ Failed to publish canary $pkg_name"
                # Don't fail the entire workflow for individual package failures
              fi
              
              cd - > /dev/null
            fi
          done
          
          # Output published packages for next jobs
          PUBLISHED_JSON=$(printf '%s\n' "${PUBLISHED[@]}" | jq -R . | jq -s .)
          echo "published-packages=$PUBLISHED_JSON" >> $GITHUB_OUTPUT
          
          echo "🎉 Canary publish completed!"
          echo "📋 Published packages: ${PUBLISHED[*]}"

  # ===================================================================
  # Canary Testing
  # ===================================================================
  test-canary:
    name: Test Canary Release
    runs-on: ubuntu-latest
    needs: [preflight, publish]
    if: needs.preflight.outputs.should-publish == 'true'
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Wait for npm propagation
        run: |
          echo "⏳ Waiting 2 minutes for npm package propagation..."
          sleep 120
          
      - name: Test canary installation
        run: |
          CANARY_VERSION="${{ needs.preflight.outputs.canary-version }}"
          echo "🧪 Testing canary installation of version $CANARY_VERSION"
          
          # Create temporary test directory
          TEST_DIR="canary-test-$(date +%s)"
          mkdir "$TEST_DIR"
          cd "$TEST_DIR"
          
          # Initialize test project
          npm init -y
          
          # Install canary packages
          echo "📦 Installing canary packages..."
          npm install "@sammons/claude-good-hooks@$CANARY_VERSION" --save
          
          # Basic functionality test
          echo "🔍 Testing basic functionality..."
          node -e "
            const hooks = require('@sammons/claude-good-hooks');
            console.log('✅ Package loaded successfully');
            console.log('Version:', require('@sammons/claude-good-hooks/package.json').version);
          "
          
          echo "✅ Canary installation test passed"

  # ===================================================================
  # Notification & Cleanup
  # ===================================================================
  notify:
    name: Notify & Create Release Notes
    runs-on: ubuntu-latest
    needs: [preflight, publish, test-canary]
    if: always() && needs.preflight.outputs.should-publish == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate canary release notes
        run: |
          CANARY_VERSION="${{ needs.preflight.outputs.canary-version }}"
          
          echo "📝 Generating release notes for canary $CANARY_VERSION"
          
          # Generate changelog since last release
          tsx .github/scripts/changelog-generator.ts \
            --format markdown \
            --release-notes \
            --next-version \
            --output "canary-release-notes.md"
          
          # Add canary-specific information
          cat > canary-info.md << EOF
          # 🧪 Canary Release: v${CANARY_VERSION}
          
          **⚠️ This is a canary release for testing purposes.**
          
          ## Installation
          
          \`\`\`bash
          npm install @sammons/claude-good-hooks@${CANARY_VERSION}
          \`\`\`
          
          ## Testing Status
          
          - **Unit Tests**: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Canary Tests**: ${{ needs.test-canary.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Published Packages**: ${{ needs.publish.outputs.published-packages }}
          
          ## Feedback
          
          Please test this canary release and provide feedback:
          - [Create an issue](https://github.com/sammons/claude-good-hooks/issues/new)
          - [Join the discussion](https://github.com/sammons/claude-good-hooks/discussions)
          
          ---
          
          EOF
          
          # Combine canary info with generated changelog
          cat canary-info.md canary-release-notes.md > final-canary-notes.md
          
      - name: Create canary release
        if: needs.preflight.outputs.is-pr != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: canary-${{ needs.preflight.outputs.canary-version }}
          name: "Canary Release v${{ needs.preflight.outputs.canary-version }}"
          body_path: final-canary-notes.md
          prerelease: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Comment on PR
        if: needs.preflight.outputs.is-pr == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('final-canary-notes.md', 'utf8');
            
            const comment = `## 🧪 Canary Release Available
            
            A canary release has been published for this PR:
            
            ${releaseNotes}
            
            ## Installation
            
            \`\`\`bash
            npm install @sammons/claude-good-hooks@${{ needs.preflight.outputs.canary-version }}
            \`\`\`
            
            Please test this canary version and provide feedback before merging.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ===================================================================
  # Rollback Job (Manual Trigger Only)
  # ===================================================================
  rollback:
    name: Rollback Canary
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [preflight, publish]
    
    steps:
      - name: Rollback canary packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🔄 Rolling back canary release..."
          
          CANARY_VERSION="${{ needs.preflight.outputs.canary-version }}"
          PUBLISHED_PACKAGES=${{ needs.publish.outputs.published-packages }}
          
          if [ -n "$PUBLISHED_PACKAGES" ] && [ "$PUBLISHED_PACKAGES" != "null" ]; then
            echo "📦 Rolling back published packages..."
            
            # Parse published packages
            for pkg in $(echo "$PUBLISHED_PACKAGES" | jq -r '.[]'); do
              echo "🔄 Deprecating @sammons/${pkg}@${CANARY_VERSION}..."
              
              # Deprecate the canary version (safer than unpublishing)
              npm deprecate "@sammons/${pkg}@${CANARY_VERSION}" \
                "Canary release rolled back due to test failures" || true
            done
          fi
          
          echo "✅ Canary rollback completed"