# ===================================================================
# GitHub Pages Deployment Workflow - Consolidated
# ===================================================================
#
# This workflow builds and deploys the project's documentation/landing page to 
# GitHub Pages. It consolidates the functionality of both deploy-docs.yml and
# the original pages.yml for optimal performance and maintainability.
#
# Key Features:
# - Supports both main and master branches for flexibility
# - Path filtering for efficiency (only runs when landing page changes)
# - PR validation (builds but doesn't deploy)
# - Proper caching and modern tooling
# - Secure deployment with proper permissions
#
# Triggers:
# - Push to main/master branch (only when landing page files change)
# - Pull requests to main/master (build validation only)
# - Manual trigger via workflow_dispatch
#
# Process:
# 1. Build the landing page from packages/landing-page
# 2. Generate static files in ./docs directory
# 3. Deploy to GitHub Pages (only on main/master push)
#
# Path filtering ensures this only runs when:
# - Files in packages/landing-page/** change
# - This workflow file itself changes
# ===================================================================

name: Deploy Documentation to GitHub Pages

on:
  # Trigger on pushes to main/master, but only when landing page files change
  # Supports both branch names for repository flexibility
  push:
    branches: [main, master]
    paths:
      - 'packages/landing-page/**'    # Landing page source files
      - '.github/workflows/pages.yml' # This workflow file itself
  
  # Also trigger on pull requests for build validation
  # This allows testing the build process without deploying
  pull_request:
    branches: [main, master]
    paths:
      - 'packages/landing-page/**'    # Landing page source files
      - '.github/workflows/pages.yml' # This workflow file itself
  
  # Allow manual triggering for testing or emergency deployments
  workflow_dispatch:

# Concurrency control for deployments
# Cancel previous deployments when new commits arrive to ensure only the latest version is deployed
concurrency:
  group: "pages"
  cancel-in-progress: true

# Required permissions for GitHub Pages deployment
permissions:
  contents: read    # Read repository contents
  pages: write      # Deploy to GitHub Pages
  id-token: write   # Generate OIDC token for secure deployment

jobs:
  # ===================================================================
  # Build Job - Generate Documentation Files
  # ===================================================================
  # This job builds the documentation/landing page for both validation (PRs)
  # and deployment (pushes). It outputs static files for GitHub Pages.
  # ===================================================================
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get the source code
      - name: Checkout
        uses: actions/checkout@v4
        
      # Step 2: Setup Node.js environment
      # Consistent with other workflows for reproducibility
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      # Step 3: Setup pnpm package manager
      # Using latest stable version for best performance and features
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4
          run_install: false
          
      # Step 4: Setup caching for dependencies
      # More efficient than npm cache, reuses cache from other workflows
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      # Step 5: Cache pnpm store for faster builds
      # Shares cache with CI and release workflows for efficiency
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      # Step 6: Install project dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      # Step 7: Build the documentation/landing page
      # This generates static HTML/CSS/JS files in a temporary build directory
      - name: Build documentation
        run: |
          echo "üèóÔ∏è  Building documentation/landing page..."
          cd packages/landing-page
          # Build to a temporary directory instead of ./docs (which is git-ignored)
          pnpm run build --outDir ./dist-pages --emptyOutDir --base /claude-good-hooks/
          echo "‚úÖ Documentation build completed"
          
      # Step 8: Configure GitHub Pages (only for push events, not PRs)
      - name: Setup Pages
        if: github.event_name == 'push'
        uses: actions/configure-pages@v4
        
      # Step 9: Upload build artifacts for deployment (only for push events)
      # For PRs, we just validate the build works without uploading artifacts
      - name: Upload artifact
        if: github.event_name == 'push'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./packages/landing-page/dist-pages # Directory containing the built static site

  # ===================================================================
  # Deploy Job - Publish to GitHub Pages
  # ===================================================================
  # This job only runs when pushing to main/master branches (not PRs).
  # It takes the artifacts from the build job and deploys them to GitHub Pages.
  # 
  # The conditional deployment prevents deploying from PRs while still
  # validating that the build works on pull requests.
  # ===================================================================
  deploy:
    name: Deploy to GitHub Pages
    # Only deploy when pushing to main or master branches
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    # GitHub Pages environment provides:
    # - Protection rules (if configured)
    # - Deployment history and rollback capabilities  
    # - Environment-specific secrets and variables
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # URL where the site is deployed
    
    runs-on: ubuntu-latest
    needs: build # Wait for build job to complete successfully
    
    steps:
      # This step handles the entire deployment process:
      # 1. Downloads the artifact created by the build job
      # 2. Deploys it to GitHub Pages
      # 3. Returns the deployment URL
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # The action automatically:
        # - Downloads the pages artifact from the build job
        # - Uploads it to GitHub Pages
        # - Configures the custom domain (if set in repository settings)
        # - Provides deployment URL in outputs.page_url